// TODO Move Headers to hpp File
#include "main.hpp"

static ModInfo modInfo; // Stores the ID and version of our mod, and is sent to the modloader upon startup
static GlobalNamespace::LevelCollectionNavigationController *levelCollectionNavigationController;
static GlobalNamespace::LevelFilteringNavigationController *filteringNavigationController;
static UnityEngine::UI::Button *button;

// Loads the config from disk using our modInfo, then returns it for use
Configuration& getConfig() {
    static Configuration config(modInfo);
    config.Load();
    return config;
}

// Returns a logger, useful for printing debug messages
Logger& getLogger() {
    static Logger* logger = new Logger(modInfo);
    return *logger;
}

MAKE_HOOK_MATCH(SoloFreePlayFlowCoordinatorHook, &HMUI::FlowCoordinator::PresentFlowCoordinator, void, HMUI::FlowCoordinator* self, HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately, bool replaceTopViewController)
{
    // Base Call
    SoloFreePlayFlowCoordinatorHook(self, flowCoordinator, finishedCallback, animationDirection, immediately, replaceTopViewController);
    if(il2cpp_utils::try_cast<GlobalNamespace::SoloFreePlayFlowCoordinator>(flowCoordinator)) {
        // Save Controller for later use
        auto* ActuallySoloFreePlayFlowCoordinator = (GlobalNamespace::SoloFreePlayFlowCoordinator*)flowCoordinator;
        levelCollectionNavigationController = ActuallySoloFreePlayFlowCoordinator->dyn_levelSelectionNavigationController()->dyn__levelCollectionNavigationController();
        filteringNavigationController = ActuallySoloFreePlayFlowCoordinator->dyn_levelSelectionNavigationController()->dyn__levelFilteringNavigationController();
        getLogger().info("Setted NavigationController");
    }
}

MAKE_HOOK_MATCH(GamePlaySetUpHook, &GlobalNamespace::GameplaySetupViewController::DidActivate, void, GlobalNamespace::GameplaySetupViewController *self, bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
    // Base Call
    GamePlaySetUpHook(self, firstActivation, addedToHierarchy, screenSystemEnabling);

    // TODO Generate Button only, when usable (not in campain etc). Should be generated by the FlowCoordinator and this should only set the Reference on the ViewController
    if (firstActivation) {

        // Create Randomselection Button
        button = QuestUI::BeatSaberUI::CreateUIButton(self->get_transform(), "", "PracticeButton", UnityEngine::Vector2(56.0f, 0), UnityEngine::Vector2(11.0f, 15.0f), []() {
            if(levelCollectionNavigationController)
            {
                // Get Array of all beatmaps in this Collection
                // TODO Bug still present, that this is not the current filtered list of all Level
                auto* levelPack = reinterpret_cast<GlobalNamespace::IAnnotatedBeatmapLevelCollection*>(levelCollectionNavigationController->dyn__levelPack());
                if(!levelPack)
                {
                    levelPack = filteringNavigationController->dyn__annotatedBeatmapLevelCollectionsViewController()->get_selectedAnnotatedBeatmapLevelCollection();
                    getLogger().info("Acquired LevelPack using Filtering");
                }
                else {
                    getLogger().info("Acquired LevelPack using normal");
                }
                System::Array* allmapsArray = reinterpret_cast<System::Array*>(levelPack->get_beatmapLevelCollection()->get_beatmapLevels());
                getLogger().info("Acquired allmapsList");

                // Calculate Upper Bound for rand
                int max = allmapsArray->System_Collections_ICollection_get_Count();
                getLogger().info("Acquired max");

                if(max > 0)
                {
                    // Select a random level form 0 to max (exclusive)
                    levelCollectionNavigationController->SelectLevel(reinterpret_cast<GlobalNamespace::IPreviewBeatmapLevel*>(allmapsArray->System_Collections_IList_get_Item(rand() % max)));
                    getLogger().info("Selected level");
                }
                else {
                    getLogger().info("Can select a random level, if there is none");
                }
            }
            });

        // HACK Add Text as a new Object because the included Textobject does not generate the correct size after the resizing of the Button
        auto text = QuestUI::BeatSaberUI::CreateText(button->get_transform(), "Random\r\nSong!", true);
        text->set_alignment(TMPro::TextAlignmentOptions::Center);
        text->set_fontSize(3.2f);
    }
}

// Called at the early stages of game loading
extern "C" void setup(ModInfo& info) {
    info.id = MOD_ID;
    info.version = VERSION;
    modInfo = info;
	
    getConfig().Load(); // Load the config file
    getLogger().info("Completed setup!");
}

// Called later on in the game loading - a good time to install function hooks
extern "C" void load() {
    il2cpp_functions::Init();

    getLogger().info("Installing hooks...");
    INSTALL_HOOK(getLogger(), SoloFreePlayFlowCoordinatorHook);
    INSTALL_HOOK(getLogger(), GamePlaySetUpHook);
    getLogger().info("Installed all hooks!");
}